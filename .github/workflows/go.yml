# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Go mod tidy
      run: go mod tidy
      
    - name: Go mod vendor
      run: go mod vendor

    - name: Create config.ts file
      working-directory: actionsTest
      run: echo "${{ secrets.CONFIG_TOML }}" > config.toml

    - name: cat
      working-directory: actionsTest
      run: cat config.toml
    - name: Get Access Token
      id: get-access-token
      run: |
        response=$(curl --location "${{ secrets.API_URL }}/auth/login" \
                 --header 'Content-Type: application/x-www-form-urlencoded' \
                 --data-urlencode "username=${{ secrets.NACOS_USERNAME }}" \
                 --data-urlencode "password=${{ secrets.NACOS_PASSWORD }}")
        access_token=$(echo "$response" | jq -r '.accessToken')
        echo "::set-output name=access_token::$access_token"

    - name: Make Request with Access Token
      run: |
        access_token="${{ steps.get-access-token.outputs.access_token }}"
        curl --location "${{ secrets.API_URL }}/cs/configs?dataId=config_ts&group=staking-web&accessToken=$access_token" > config.ts

    - name: print
      run: cat config.ts

    - name: Build and run
      working-directory: actionsTest
      run: go run main.go
